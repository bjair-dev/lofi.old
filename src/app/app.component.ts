import {
  Component,
  ElementRef,
  ViewChild,
  Renderer2,
  AfterViewInit,
  HostListener,
} from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'],
})
export class AppComponent {
  @HostListener('contextmenu', ['$event'])
  onRightClick(event: Event): void {
    event.preventDefault();
  }
  title = 'lofi-web';

  controls: HTMLElement[];
  frame: HTMLIFrameElement;

  constructor(
    private sanitizer: DomSanitizer,
    private elementRef: ElementRef,
    private renderer: Renderer2
  ) {
    this.fraseSemana = this.getFraseSemana();
  }
  fraseSemana: string;

  /*   ngAfterViewInit() {
    this.controls = Array.from(
      this.elementRef.nativeElement.querySelectorAll('.video-control')
    );
    this.frame = this.elementRef.nativeElement.querySelector('iframe');

    const message = (func: string) => {
      return JSON.stringify({
        event: 'command',
        func: func,
        args: [],
      });
    };

    const execCommand = (frame: HTMLIFrameElement | any) => {
      return (func: string) => {
        return () => {
          frame.contentWindow.postMessage(message(func), '*');
        };
      };
    };

    const frameCommand = execCommand(this.frame);

    const configControl = (vc: HTMLElement) => {
      const func: any = vc.getAttribute('data-func');
      const handler = frameCommand(func);
      vc.tabIndex = 0;
      this.renderer.listen(vc, 'click', handler);
    };

    this.controls.forEach(configControl);

    const autoplayCommand = frameCommand('playVideo');
    setTimeout(autoplayCommand, 2000);
  }
 */
  youtubeUrl = 'https://www.youtube.com/embed/jfKfPfyJRdk?enablejsapi=1';

  btnComienza: boolean = false;
  letraDesaparece: any = false;
  envia(e: any) {
    if (this.btnComienza == false) {
      this.btnComienza = true;
    } else {
      this.btnComienza = false;
    }
  }

  llamaFuncion() {
    this.btnComienza = true;

    this.controls = Array.from(
      this.elementRef.nativeElement.querySelectorAll('.video-control')
    );
    this.frame = this.elementRef.nativeElement.querySelector('iframe');

    const message = (func: string) => {
      return JSON.stringify({
        event: 'command',
        func: func,
        args: [],
      });
    };

    const execCommand = (frame: HTMLIFrameElement | any) => {
      return (func: string) => {
        return () => {
          frame.contentWindow.postMessage(message(func), '*');
        };
      };
    };

    const frameCommand = execCommand(this.frame);

    const configControl = (vc: HTMLElement) => {
      const func: any = vc.getAttribute('data-func');
      const handler = frameCommand(func);
      vc.tabIndex = 0;
      this.renderer.listen(vc, 'click', handler);
    };

    this.controls.forEach(configControl);
    console.log('letraDesaparece', this.letraDesaparece);
    if (this.letraDesaparece == true) {
      console.log('no haces nada ya');
    } else {
      const autoplayCommand = frameCommand('playVideo');
      setTimeout(autoplayCommand, 1000);
    }
    this.letraDesaparece = true;
  }

  pausa() {
    this.controls = Array.from(
      this.elementRef.nativeElement.querySelectorAll('.video-control')
    );
    this.frame = this.elementRef.nativeElement.querySelector('iframe');

    const message = (func: string) => {
      return JSON.stringify({
        event: 'command',
        func: func,
        args: [],
      });
    };

    const execCommand = (frame: HTMLIFrameElement | any) => {
      return (func: string) => {
        return () => {
          frame.contentWindow.postMessage(message(func), '*');
        };
      };
    };

    const frameCommand = execCommand(this.frame);

    const configControl = (vc: HTMLElement) => {
      const func: any = vc.getAttribute('data-func');
      const handler = frameCommand(func);
      vc.tabIndex = 0;
      this.renderer.listen(vc, 'click', handler);
    };

    this.controls.forEach(configControl);

    const autoplayCommand = frameCommand('pauseVideo');
    autoplayCommand();
  }

  play() {
    this.controls = Array.from(
      this.elementRef.nativeElement.querySelectorAll('.video-control')
    );
    this.frame = this.elementRef.nativeElement.querySelector('iframe');

    const message = (func: string) => {
      return JSON.stringify({
        event: 'command',
        func: func,
        args: [],
      });
    };

    const execCommand = (frame: HTMLIFrameElement | any) => {
      return (func: string) => {
        return () => {
          frame.contentWindow.postMessage(message(func), '*');
        };
      };
    };

    const frameCommand = execCommand(this.frame);

    const configControl = (vc: HTMLElement) => {
      const func: any = vc.getAttribute('data-func');
      const handler = frameCommand(func);
      vc.tabIndex = 0;
      this.renderer.listen(vc, 'click', handler);
    };

    this.controls.forEach(configControl);

    const autoplayCommand = frameCommand('playVideo');
    autoplayCommand();
  }

  isModalOpen = false;
  options = [
    {
      id: 1,
      img: 'https://bjair-dev.github.io/lofi.old/dist/assets/img/station_thumb_jfKfPfyJRdk.gif',
      idytb: 'jfKfPfyJRdk',
      name: 'lofi hip hop radio - beats to relax/study to',
    },
    {
      id: 2,
      img: 'https://bjair-dev.github.io/lofi.old/dist/assets/img/station_thumb_e3L1PIY1pN8.gif',
      idytb: 'lP26UCnoH9s',
      name: 'coffee shop radio // 24/7 lofi hip-hop beats',
    },
    {
      id: 3,
      img: 'https://bjair-dev.github.io/lofi.old/dist/assets/img/station_thumb_MVPTGNGiI-4.gif',
      idytb: 'MVPTGNGiI-4',
      name: 'synthwave radio 游깳 - beats to chill/game to',
    },
    {
      id: 4,
      img: 'https://bjair-dev.github.io/lofi.old/dist/assets/img/station_thumb_rUxyKA_-grg.gif',
      idytb: 'rUxyKA_-grg',
      name: 'lofi hip hop radio - beats to sleep/chill to',
    },
    // Agrega m치s opciones seg칰n sea necesario
  ];
  selectedOption: number | null = null;

  openModal() {
    this.isModalOpen = true;
  }

  closeModal() {
    this.isModalOpen = false;
    this.selectedOption = null;
    this.loading = false;
  }
  loading: any;
  selectOption(id: any) {
    this.selectedOption = id;
    this.namelofi = id.name;
    console.log(this.safeUrl);
    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(
      `https://www.youtube.com/embed/${id.idytb}?enablejsapi=1`
    );
    this.loading = true;
    console.log(this.safeUrl);
    setTimeout(() => {
      this.play();
      this.closeModal();
    }, 2000);
  }
  safeUrl: any;
  namelofi = 'lofi hip hop radio - beats to relax/study to';
  ngOnInit() {
    this.safeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(
      this.youtubeUrl
    );
    /*   this.youtubeUrl = this.sanitizer.bypassSecurityTrustResourceUrl(
      this.liveStreamUrl
    ); */
  }

  getFraseSemana(): string {
    const frases: string[] = [
      'El comienzo de un nuevo camino.',
      'La melancol칤a se desvanece en notas suaves.',
      'El amor se encuentra en los peque침os detalles.',
      'La belleza se encuentra en la simplicidad.',
      'Deja que tus sue침os se conviertan en realidad.',
      'La calma se encuentra en el silencio interior.',
      'Descubre la magia en los momentos ordinarios.',
      'La m칰sica alimenta el alma y el coraz칩n.',
      'El tiempo pasado no define tu futuro.',
      'Encuentra la paz en medio del caos.',
      'El arte es una expresi칩n del coraz칩n.',
      'Agradece las peque침as cosas de la vida.',
      'Las palabras tienen el poder de sanar.',
      'Sigue tu intuici칩n y conf칤a en ti mismo.',
      'Las risas son el mejor remedio para el alma.',
      'Abraza la imperfecci칩n y aprende de ella.',
      'La creatividad florece en la libertad.',
      'Deja que tus pasiones te gu칤en hacia tus sue침os.',
      'La naturaleza nos muestra la belleza de la vida.',
      'Las segundas oportunidades pueden cambiar tu mundo.',
      'El amor propio es la clave de la felicidad.',
      'El cambio es la puerta hacia el crecimiento.',
      'La gratitud transforma la vida cotidiana.',
      'Atr칠vete a ser diferente y sigue tu propio camino.',
      'El presente es el regalo m치s valioso que tenemos.',
      'El perd칩n libera el peso del pasado.',
      'La perseverancia lleva al 칠xito.',
      'La serenidad se encuentra en la aceptaci칩n.',
      'La empat칤a construye puentes entre las personas.',
      'Las palabras amables pueden iluminar el d칤a de alguien.',
      'Deja que la m칰sica te lleve a lugares desconocidos.',
      'El aprendizaje es un viaje sin fin.',
      'La amistad verdadera es un tesoro invaluable.',
      'El optimismo es la clave para superar los desaf칤os.',
      'Las peque침as acciones tienen un gran impacto.',
      'El equilibrio es la clave para una vida plena.',
      'La esperanza nos gu칤a hacia un futuro mejor.',
      'El respeto y la tolerancia unen a las personas.',
      'La curiosidad nos impulsa a descubrir nuevas maravillas.',
      'La paciencia es una virtud que trae recompensas.',
      'Las experiencias nos enriquecen y nos transforman.',
      'El amor incondicional nutre el coraz칩n.',
      'La vulnerabilidad nos conecta en un nivel m치s profundo.',
      'La alegr칤a se encuentra en los momentos simples.',
      'La sinceridad fortalece los lazos humanos.',
      'Deja que la luz gu칤e tus pasos en la oscuridad.',
      'La autenticidad es la clave para encontrar tu voz.',
      'La belleza est치 en todas partes, solo debemos abrir los ojos.',
      'La resiliencia nos permite superar los desaf칤os m치s dif칤ciles.',
      'La introspecci칩n nos lleva a un mayor autoconocimiento.',
      'El amor trasciende las barreras y une a las almas.',
      'El fin es solo el comienzo de algo nuevo.',
    ];

    const fechaActual: Date = new Date();
    const numeroSemana: number = this.getNumeroSemana(fechaActual);

    // Ajusta el n칰mero de semana para que est칠 dentro del rango v치lido (1 a 52)
    const indiceFrase: number = (numeroSemana - 1) % frases.length;

    return frases[indiceFrase];
  }

  getNumeroSemana(date: Date): number {
    const onejan: Date = new Date(date.getFullYear(), 0, 1);
    const millisecsInDay: number = 86400000;
    return Math.ceil(
      ((date.getTime() - onejan.getTime()) / millisecsInDay +
        onejan.getDay() +
        1) /
        7
    );
  }
}
